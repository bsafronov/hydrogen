// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum UserRole {
    USER
    ADMIN
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    userId            String  @db.ObjectId
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    sessionToken String   @unique
    expires      DateTime
    userId       String   @db.ObjectId
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name          String?
    email         String?           @unique
    emailVerified DateTime?
    image         String?
    role          UserRole          @default(USER)
    accounts      Account[]
    sessions      Session[]
    likes         PostLike[]
    comments      PostComment[]
    commentLikes  PostCommentLike[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    title            String
    shortDescription String?
    fullDescription  String?
    link             String?
    images           String[]
    tags             String[]
    isFeatured       Boolean  @default(false)
    isPublished      Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    likes    PostLike[]
    comments PostComment[]
}

model PostLike {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    postId String @db.ObjectId
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostComment {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    description String
    createdAt   DateTime @default(now())

    postId String @db.ObjectId
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    likes PostCommentLike[]
}

model PostCommentLike {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    commentId String      @db.ObjectId
    comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
